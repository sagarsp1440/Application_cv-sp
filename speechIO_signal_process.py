# -*- coding: utf-8 -*-
"""7.1P.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12fffGczH8E-7tqRfg1Metak_swocfmK6
"""

!pip install librosa

pip install pydub

import numpy as np
import matplotlib.pyplot as plt
import librosa
import librosa.display
import IPython.display as ipd
from pydub import AudioSegment
from pydub.utils import mediainfo
speech = AudioSegment.from_wav('arctic_a0005.wav')

x = speech.get_array_of_samples()
 # samples x(t)
x_sr = speech.frame_rate

#x_sr = speech.frame_rate # sampling rate f - see slide 24 in week 7 lecture slides
print('Sampling rate: ', x_sr)
print('Number of samples: ', len(x))

duration = librosa.get_duration(filename = 'arctic_a0005.wav')
n_samples = duration * x_sr
print('duration: ', duration)
print('n_samples: ', n_samples)

x_range = np.linspace(0, duration, len(x))
plt.figure(figsize = (15, 5))
plt.plot(x_range, x)
plt.xlabel('Time in seconds')
plt.ylabel('Amplitude')

mid_point = int(len(x) / 2)
x1 = x[0:mid_point]

x2 = x[mid_point:len(x)]
x1_audio = AudioSegment(
#raw data
data = x1,
#2 bytes = 16 bit samples
sample_width = 2,
#frame rate
frame_rate = x_sr,
#channels = 1 for mono and 2 for stereo
channels = 1)
x2_audio = AudioSegment(
#raw data
data = x2,
#2 bytes = 16 bit samples
sample_width = 2,
#frame rate
frame_rate = x_sr,
#channels = 1 for mono and 2 for stereo
channels = 1)

duration1 = librosa.get_duration(filename = 'arctic_a0005_1.wav')
duration2 = librosa.get_duration(filename = 'arctic_a0005_2.wav')

x1_range = np.linspace(0, duration1, len(x1))
plt.figure(figsize = (15, 5))
plt.plot(x1_range, x1)
plt.xlabel('Time in seconds')
plt.ylabel('Amplitude')

x2_range = np.linspace(0, duration2, len(x2))
plt.figure(figsize = (15, 5))
plt.plot(x2_range, x2)
plt.xlabel('Time in seconds')
plt.ylabel('Amplitude')

x1_audio.export('arctic_a0005_1.wav', format = 'wav')
x2_audio.export('arctic_a0005_2.wav', format = 'wav')

speech1 = AudioSegment.from_wav('arctic_a0005_1.wav')

x_1= speech1.get_array_of_samples()
 # samples x(t)
x_sr_1= speech1.frame_rate

#x_sr = speech.frame_rate # sampling rate f - see slide 24 in week 7 lecture slides
print('Sampling rate: ', x_sr_1)
print('Number of samples: ', len(x_1))

speech2 = AudioSegment.from_wav('arctic_a0005_2.wav')

x_2= speech2.get_array_of_samples()
 # samples x(t)
x_sr_2= speech2.frame_rate

#x_sr = speech.frame_rate # sampling rate f - see slide 24 in week 7 lecture slides
print('Sampling rate: ', x_sr_2)
print('Number of samples: ', len(x_2))

freq_range = 1024
#window size: the number of samples per frame
#each frame is of 30ms
win_length = int(x_sr * 0.03)
#number of samples between tww consecutive frames
hop_length = int(win_length / 2)
#windowing technique
window = 'hann'

freq_range = 1024
#window size: the number of samples per frame
#each frame is of 30ms
win_length1 = int(x_sr_1 * 0.03)
#number of samples between tww consecutive frames
hop_length1 = int(win_length1 / 2)
#windowing technique
window = 'hann'

freq_range = 1024
#window size: the number of samples per frame
#each frame is of 30ms
win_length2 = int(x_sr_2 * 0.030)
#number of samples between tww consecutive frames
hop_length2 = int(win_length2 / 2)
#windowing technique
window = 'hann'

X = librosa.stft(np.float32(x),
n_fft = freq_range,
window = window,
hop_length = hop_length,
win_length = win_length)

X_1 = librosa.stft(np.float32(x_1),
n_fft = freq_range,
window = window,
hop_length = hop_length1,
win_length = win_length1)

X_2 = librosa.stft(np.float32(x_2),
n_fft = freq_range,
window = window,
hop_length = hop_length2,
win_length = win_length2)

print(X.shape)
print(X_1.shape)
print(X_2.shape)

plt.figure(figsize = (25, 10))

Xdb = librosa.amplitude_to_db(abs(X))
librosa.display.specshow(
#spectrogram
Xdb,
#sampling rate
sr = x_sr,
#label for horizontal axis
x_axis = 'time',
#presentation scale
y_axis = 'linear',
#hop_lenght
hop_length = hop_length)

Xdb1 = librosa.amplitude_to_db(abs(X_1))
librosa.display.specshow(
#spectrogram
Xdb1,
#sampling rate
sr = x_sr_1,
#label for horizontal axis
x_axis = 'time',
#presentation scale
y_axis = 'linear',
#hop_lenght
hop_length = hop_length1)

Xdb = librosa.amplitude_to_db(abs(X_2))
librosa.display.specshow(
#spectrogram
Xdb,
#sampling rate
sr = x_sr_2,
#label for horizontal axis
x_axis = 'time',
#presentation scale
y_axis = 'linear',
#hop_lenght
hop_length = hop_length2)

print(x)

#number of samples
N = 600
#sample spacing
T = 1.0 / 800.0
t = np.linspace(0.0, N*T, N)
s1 = np.sin(50.0 * 2.0 * np.pi * t)
s2 = 0.5 * np.sin(80.0 * 2.0 * np.pi * t)
s = s1 + s2

plt.figure(figsize = (15, 5))
plt.plot(s1, label = 's1', color = 'r')
plt.plot(s2, label = 's2', color = 'g')
plt.plot(s, label = 's', color = 'b')
plt.xlabel('Samples')
plt.ylabel('Amplitude')
plt.legend(loc = "upper left")

S = librosa.stft(s, n_fft = 1024, window = 'hann', hop_length = N, win_length = N)
S_0 = S[:, 0]
mag_S_0 = np.abs(S_0)
plt.plot(mag_S_0, color = 'b')

S = librosa.stft(s, n_fft = 1024, window = 'boxcar', hop_length = N, win_length = N)
S_0 = S[:, 0]
mag_S_0 = np.abs(S_0)
plt.plot(mag_S_0, color = 'b')

S = librosa.stft(s, n_fft = 1024, window = 'hamming', hop_length = N, win_length = N)
S_0 = S[:, 0]
mag_S_0 = np.abs(S_0)
plt.plot(mag_S_0, color = 'b')

m = 400
S = librosa.stft(s, n_fft = 1024, window = 'hann', hop_length = int(m / 2), win_length = m)
#we take S_1, which is an intermediate frame.
S_1 = S[:, 1]
mag_S_1 = np.abs(S_1)
plt.plot(mag_S_1, color = 'b')

m = 400
S = librosa.stft(s, n_fft = 1024, window = 'boxcar', hop_length = int(m / 2), win_length = m)
#we take S_1, which is an intermediate frame.
S_1 = S[:, 1]
mag_S_1 = np.abs(S_1)
plt.plot(mag_S_1, color = 'b')

m = 400
S = librosa.stft(s, n_fft = 1024, window = 'hamming', hop_length = int(m / 2), win_length = m)
#we take S_1, which is an intermediate frame.
S_1 = S[:, 1]
mag_S_1 = np.abs(S_1)
plt.plot(mag_S_1, color = 'b')

